// Copyright 2023 Coinbase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by: OpenAPI Generator (https://openapi-generator.tech)

package server

import (
	"context"
	"net/http"

	"github.com/coinbase/rosetta-sdk-go/types"
)

// AccountApiRouter defines the required methods for binding the api requests to a responses for the
// AccountApi
// The AccountApiRouter implementation should parse necessary information from the http request,
// pass the data to a AccountApiServicer to perform the required actions, then write the service
// results to the http response.
type AccountApiRouter interface {
	AccountBalance(http.ResponseWriter, *http.Request)
	AccountCoins(http.ResponseWriter, *http.Request)
}

// BlockApiRouter defines the required methods for binding the api requests to a responses for the
// BlockApi
// The BlockApiRouter implementation should parse necessary information from the http request,
// pass the data to a BlockApiServicer to perform the required actions, then write the service
// results to the http response.
type BlockApiRouter interface {
	Block(http.ResponseWriter, *http.Request)
	BlockTransaction(http.ResponseWriter, *http.Request)
}

// CallApiRouter defines the required methods for binding the api requests to a responses for the
// CallApi
// The CallApiRouter implementation should parse necessary information from the http request,
// pass the data to a CallApiServicer to perform the required actions, then write the service
// results to the http response.
type CallApiRouter interface {
	Call(http.ResponseWriter, *http.Request)
}

// ConstructionApiRouter defines the required methods for binding the api requests to a responses
// for the ConstructionApi The ConstructionApiRouter implementation should parse necessary
// information from the http request, pass the data to a ConstructionApiServicer to perform the
// required actions, then write the service results to the http response.
type ConstructionApiRouter interface {
	ConstructionCombine(http.ResponseWriter, *http.Request)
	ConstructionDerive(http.ResponseWriter, *http.Request)
	ConstructionHash(http.ResponseWriter, *http.Request)
	ConstructionMetadata(http.ResponseWriter, *http.Request)
	ConstructionParse(http.ResponseWriter, *http.Request)
	ConstructionPayloads(http.ResponseWriter, *http.Request)
	ConstructionPreprocess(http.ResponseWriter, *http.Request)
	ConstructionSubmit(http.ResponseWriter, *http.Request)
}

// EventsApiRouter defines the required methods for binding the api requests to a responses for the
// EventsApi
// The EventsApiRouter implementation should parse necessary information from the http request,
// pass the data to a EventsApiServicer to perform the required actions, then write the service
// results to the http response.
type EventsApiRouter interface {
	EventsBlocks(http.ResponseWriter, *http.Request)
}

// MempoolApiRouter defines the required methods for binding the api requests to a responses for the
// MempoolApi
// The MempoolApiRouter implementation should parse necessary information from the http request,
// pass the data to a MempoolApiServicer to perform the required actions, then write the service
// results to the http response.
type MempoolApiRouter interface {
	Mempool(http.ResponseWriter, *http.Request)
	MempoolTransaction(http.ResponseWriter, *http.Request)
}

// NetworkApiRouter defines the required methods for binding the api requests to a responses for the
// NetworkApi
// The NetworkApiRouter implementation should parse necessary information from the http request,
// pass the data to a NetworkApiServicer to perform the required actions, then write the service
// results to the http response.
type NetworkApiRouter interface {
	NetworkList(http.ResponseWriter, *http.Request)
	NetworkOptions(http.ResponseWriter, *http.Request)
	NetworkStatus(http.ResponseWriter, *http.Request)
}

// SearchApiRouter defines the required methods for binding the api requests to a responses for the
// SearchApi
// The SearchApiRouter implementation should parse necessary information from the http request,
// pass the data to a SearchApiServicer to perform the required actions, then write the service
// results to the http response.
type SearchApiRouter interface {
	SearchTransactions(http.ResponseWriter, *http.Request)
}

// AccountApiServicer defines the api actions for the AccountApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AccountApiServicer interface {
	AccountBalance(
		context.Context,
		*types.AccountBalanceRequest,
	) (*types.AccountBalanceResponse, *types.Error)
	AccountCoins(
		context.Context,
		*types.AccountCoinsRequest,
	) (*types.AccountCoinsResponse, *types.Error)
}

// BlockApiServicer defines the api actions for the BlockApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BlockApiServicer interface {
	Block(context.Context, *types.BlockRequest) (*types.BlockResponse, *types.Error)
	BlockTransaction(
		context.Context,
		*types.BlockTransactionRequest,
	) (*types.BlockTransactionResponse, *types.Error)
}

// CallApiServicer defines the api actions for the CallApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CallApiServicer interface {
	Call(context.Context, *types.CallRequest) (*types.CallResponse, *types.Error)
}

// ConstructionApiServicer defines the api actions for the ConstructionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConstructionApiServicer interface {
	ConstructionCombine(
		context.Context,
		*types.ConstructionCombineRequest,
	) (*types.ConstructionCombineResponse, *types.Error)
	ConstructionDerive(
		context.Context,
		*types.ConstructionDeriveRequest,
	) (*types.ConstructionDeriveResponse, *types.Error)
	ConstructionHash(
		context.Context,
		*types.ConstructionHashRequest,
	) (*types.TransactionIdentifierResponse, *types.Error)
	ConstructionMetadata(
		context.Context,
		*types.ConstructionMetadataRequest,
	) (*types.ConstructionMetadataResponse, *types.Error)
	ConstructionParse(
		context.Context,
		*types.ConstructionParseRequest,
	) (*types.ConstructionParseResponse, *types.Error)
	ConstructionPayloads(
		context.Context,
		*types.ConstructionPayloadsRequest,
	) (*types.ConstructionPayloadsResponse, *types.Error)
	ConstructionPreprocess(
		context.Context,
		*types.ConstructionPreprocessRequest,
	) (*types.ConstructionPreprocessResponse, *types.Error)
	ConstructionSubmit(
		context.Context,
		*types.ConstructionSubmitRequest,
	) (*types.TransactionIdentifierResponse, *types.Error)
}

// EventsApiServicer defines the api actions for the EventsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EventsApiServicer interface {
	EventsBlocks(
		context.Context,
		*types.EventsBlocksRequest,
	) (*types.EventsBlocksResponse, *types.Error)
}

// MempoolApiServicer defines the api actions for the MempoolApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MempoolApiServicer interface {
	Mempool(context.Context, *types.NetworkRequest) (*types.MempoolResponse, *types.Error)
	MempoolTransaction(
		context.Context,
		*types.MempoolTransactionRequest,
	) (*types.MempoolTransactionResponse, *types.Error)
}

// NetworkApiServicer defines the api actions for the NetworkApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NetworkApiServicer interface {
	NetworkList(context.Context, *types.MetadataRequest) (*types.NetworkListResponse, *types.Error)
	NetworkOptions(
		context.Context,
		*types.NetworkRequest,
	) (*types.NetworkOptionsResponse, *types.Error)
	NetworkStatus(
		context.Context,
		*types.NetworkRequest,
	) (*types.NetworkStatusResponse, *types.Error)
}

// SearchApiServicer defines the api actions for the SearchApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SearchApiServicer interface {
	SearchTransactions(
		context.Context,
		*types.SearchTransactionsRequest,
	) (*types.SearchTransactionsResponse, *types.Error)
}
